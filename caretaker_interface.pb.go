// Code generated by protoc-gen-go. DO NOT EDIT.
// source: caretaker_interface.proto

/*
Package redcloud is a generated protocol buffer package.

It is generated from these files:
	caretaker_interface.proto
	data_interface.proto
	metadata.proto
	node_interface.proto
	types.proto

It has these top-level messages:
	TableName
	GetRequest
	ColumnRange
	GetRangeRequest
	InsertRequest
	SSTablePathDescription
	ServerTabletMetadata
	ColumnFamilyMetadata
	TableMetadata
	ServerTableMetadata
	RangeServingRequest
	RangeReleaseRequest
	RangeReleaseResponse
	ServerStatus
	Empty
	Column
	ColumnSet
	ColumnFamily
*/
package redcloud

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//
// TableName contains just the name of a table.
type TableName struct {
	// Name of the table the operation is performed on.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *TableName) Reset()                    { *m = TableName{} }
func (m *TableName) String() string            { return proto.CompactTextString(m) }
func (*TableName) ProtoMessage()               {}
func (*TableName) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TableName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*TableName)(nil), "redcloud.TableName")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AdminService service

type AdminServiceClient interface {
	// Create a new table with the specified metadata.
	CreateTable(ctx context.Context, in *TableMetadata, opts ...grpc.CallOption) (*Empty, error)
	// Update an existing table with the specified metadata.
	UpdateTable(ctx context.Context, in *TableMetadata, opts ...grpc.CallOption) (*Empty, error)
	//
	// Delete a table; since this will unregister it from all data nodes,
	// this may take some time.
	DeleteTable(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*Empty, error)
}

type adminServiceClient struct {
	cc *grpc.ClientConn
}

func NewAdminServiceClient(cc *grpc.ClientConn) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) CreateTable(ctx context.Context, in *TableMetadata, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/redcloud.AdminService/CreateTable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateTable(ctx context.Context, in *TableMetadata, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/redcloud.AdminService/UpdateTable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteTable(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/redcloud.AdminService/DeleteTable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AdminService service

type AdminServiceServer interface {
	// Create a new table with the specified metadata.
	CreateTable(context.Context, *TableMetadata) (*Empty, error)
	// Update an existing table with the specified metadata.
	UpdateTable(context.Context, *TableMetadata) (*Empty, error)
	//
	// Delete a table; since this will unregister it from all data nodes,
	// this may take some time.
	DeleteTable(context.Context, *TableName) (*Empty, error)
}

func RegisterAdminServiceServer(s *grpc.Server, srv AdminServiceServer) {
	s.RegisterService(&_AdminService_serviceDesc, srv)
}

func _AdminService_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redcloud.AdminService/CreateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateTable(ctx, req.(*TableMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redcloud.AdminService/UpdateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateTable(ctx, req.(*TableMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redcloud.AdminService/DeleteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteTable(ctx, req.(*TableName))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdminService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "redcloud.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTable",
			Handler:    _AdminService_CreateTable_Handler,
		},
		{
			MethodName: "UpdateTable",
			Handler:    _AdminService_UpdateTable_Handler,
		},
		{
			MethodName: "DeleteTable",
			Handler:    _AdminService_DeleteTable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "caretaker_interface.proto",
}

func init() { proto.RegisterFile("caretaker_interface.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 192 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4c, 0x4e, 0x2c, 0x4a,
	0x2d, 0x49, 0xcc, 0x4e, 0x2d, 0x8a, 0xcf, 0xcc, 0x2b, 0x49, 0x2d, 0x4a, 0x4b, 0x4c, 0x4e, 0xd5,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x28, 0x4a, 0x4d, 0x49, 0xce, 0xc9, 0x2f, 0x4d, 0x91,
	0xe2, 0xcb, 0x4d, 0x2d, 0x49, 0x4c, 0x49, 0x2c, 0x49, 0x84, 0xc8, 0x48, 0x71, 0x97, 0x54, 0x16,
	0xa4, 0x16, 0x43, 0x38, 0x4a, 0xf2, 0x5c, 0x9c, 0x21, 0x89, 0x49, 0x39, 0xa9, 0x7e, 0x89, 0xb9,
	0xa9, 0x42, 0x42, 0x5c, 0x2c, 0x79, 0x89, 0xb9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41,
	0x60, 0xb6, 0xd1, 0x6e, 0x46, 0x2e, 0x1e, 0xc7, 0x94, 0xdc, 0xcc, 0xbc, 0xe0, 0xd4, 0xa2, 0xb2,
	0xcc, 0xe4, 0x54, 0x21, 0x4b, 0x2e, 0x6e, 0xe7, 0xa2, 0xd4, 0xc4, 0x92, 0x54, 0xb0, 0x3e, 0x21,
	0x71, 0x3d, 0x98, 0x45, 0x7a, 0x60, 0x01, 0x5f, 0xa8, 0x65, 0x52, 0xfc, 0x08, 0x09, 0xd7, 0xdc,
	0x82, 0x92, 0x4a, 0x25, 0x06, 0x90, 0xd6, 0xd0, 0x82, 0x14, 0xb2, 0xb4, 0x9a, 0x72, 0x71, 0xbb,
	0xa4, 0xe6, 0xa4, 0xc2, 0xb4, 0x0a, 0xa3, 0x69, 0x05, 0x39, 0x1f, 0x8b, 0xb6, 0x24, 0x36, 0xb0,
	0x2f, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x5b, 0xe2, 0x80, 0x95, 0x29, 0x01, 0x00, 0x00,
}
